Redux هو إطار عمل لإدارة الحالة يمكن استخدامه مع عدد من تقنيات الويب المختلفة ، بما في ذلك React.
في Redux ، يوجد كائن حالة واحد مسؤول عن الحالة الكاملة لتطبيقك. هذا يعني أنه إذا كان لديك تطبيق React يحتوي على عشرة مكونات ، وكان لكل مكون حالته المحلية الخاصة به ، فسيتم تحديد الحالة الكاملة لتطبيقك من خلال كائن حالة واحد موجود في Redux store. هذا هو أول مبدأ مهم يجب فهمه عند تعلم Redux: متجر Redux هو المصدر الوحيد للحقيقة عندما يتعلق الأمر بحالة التطبيق.ما يعني أنه إذا أراد أي مكون تحديث الحالة يجب فعل ذلك من خلال store.
لإنشاء متجر بredux نستعمل:
const store = Redux.createStore(reducer);
قمنا بإنشاء store بالدالة و أعطيناه reducer التي هي دالة نجهزها مسبقا تسمى المقلل كوسيطة للدالة و وضعناه داخل متغير.
لجلب state من store :
const currentState = store.getState();
هنا اخذنا البيانات من المتجر و وضعناه في متغير.
من أجل تحديث البيانات نستعمل الإجراءات التي تكون كائنات بخاصية و قيمة:
const action = {
  type: "login"
}
هنا أنشأنا إجراء بخاصية type بقيمة login. 
الآن بعد إنشاء الإجراء نحتاج إلى إرساله و نفعل ذلك من خلال إنشاء دالة (يجب وضع إسم لها) تقوم بإرجاع الإجراء:
function actionCreator(act){
  return act
}
هنا أنشأنا دالة تقوم بإرجاع الإجراء.
و لإرساله إلى المتجر:
store.dispatch(actionCreator());
هنا قمنا بإرسال الإجراء إلى المتجر.
بعد ارسال الاجراء علينا معرفة كيف نتعامل معه و هنا يأتي دور المقلل المذكور سابقا حيث دوره الوحيد عو تخديث الحالة:
function reducer(state = {login:false},action) {
  if(action.type === "login"){
    return {
      login: true
}
  }
  else {
    return state;
  }
}
في هذا الكود عرفنا دالة المقلل (المخفض) و اعطيناه حجتبن الاولى الحالة العامة للمتجر و الثانية هو الاجراء الذي ارسلناه للمتجر فاءا كان الاجراء يرسل ما انتظرناه يرجع كائن جديد و هو سيكون الحالة العامة الجديدى او يرجع الحالة القديمة اذا لم يرسل ما ننتظره.
الدالة: store.subscribe تكتشف اذا حدث اجراء للمتجر و تقبل دالة كوسيطة ترجع هذه الدالة كلما حدث اجراء للمتجر.
في حالات التكبيقات المعقدة نحتاج اكثر من مخفص واحد و من احل جمع المخفضات مع بعضها نستعمل Redux.combineReducers() حيث تقبل هذه الدالة كائنا كوسيطا و حيث خصائص هذا الكائن هي مفاتيح المتجر و قيمه هي اسماء المخفضات:
let authRed = (state,action) => {
  return state
}
let noteRed = (state,action) => {
  return state
}
let rootReducer = Redux.combineReducers({
  auth : authRed,
  note : noteRed
}
يمكن التعامل مع الاجراءات الغير متزامنة مثل استدعاء api او دالة التاخير و ذلك من خلال تضمين مكتبة redux-thunk ثم عند انشاء متجر نضع حجة ثانية كالتالي:
const store = Redux.createStore(reducer,Redux.applyMiddleware(ReduxThunk.default));
هنا انشانا متجرا عاديا لكن بإضافة حجة ثانية هي الوسيط و الذي يتمثل في اللاتزامني، ثم بعد ذلك عليما ان ننشا دالة الاحراء الاي تكون غير متزامنة:
function asyncFunc() {
  return (dispatch) => {
  dispatch({name:key,name:key})
  setTimeout(()=>{
    dispatch({name:key,name:key})
  },2500)
  }
}
بعدها نرسل هذا الإجراء الى المتجر بطريقة بسيطة كالمعتاد.
