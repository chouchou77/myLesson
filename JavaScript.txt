لإنشاء تعليق في js نضع // في اول السطر ما تبقى من السطر كله سيكون تعليق اما التعليق متعدد الاسطر فنضع */ في بداية السطر الأول و /* في نهاية السكر الاخير.
البيانات هي اي شيء له معنى للكمبيوتر و تمنح js مجموعة من البيانات مثل: string,number,null,boolean,float,...
المتغيرات هي حاويات تخزن البيانات داخلها و لتعريف متغير نكتب الكلمة المفتاحية var ثم اسم المتغير ثم فاصلة منقوطة:
var name;
لوضع بيانات داخل المتغير نكتب اسم المتغير الذي انشأناه و اماه = ثم القيمة.
name = "chihab";
ملاحظة: البيانات ذات النوع string تكتب داخل مزدوجتين " ".
يمكننا وضع قيمة متغير سابق داخل متغير جديد:
var v;
v = name;
هنا المتغير v اصبح لديه قيمة المتغير name و هي "chihab".
يمكننا اعطاء قيمة للمتغير في نفس السطر الذي ننشأه فيه:
var age = 17;
هنا انشأنا متغير جديد و اعطيناه قيمة في نفس الوقت.
اسماء المتغيرات في js حساسة لحالة الاحرف.
من سلبيات انشاء المتغيرات باستعمال var انك تستطيع تغيير قيمة المتغير فيما بعد و إعلن متغير جديد بنفس إسم المتغير القديم:
var v = 5;
var v = 6;
لذلك ظهر let الذي يمنع انشاء متغير مرتين و ايضا عند تعريف let داخل كتلة لا تعرف خارجها اي يبقى المتغير محلي، عكس var التي مهما عرفت داخل كتلة يبقى المتغير عالمي اي معرف في كل الكود.
و هناك ايضا const التي تمنع من اعادة تعيين قيمة جديدة للمتغير، لكن مع الكائنات و الوظائف و المصفوفات فهو فقط يمنع من اعادة تعيينه و لكن يسمح بتغيير عناصره.
تمنح js العمليات الحسابية: 
الجمع +
الطرح -
الضرب *
القسمة /
باقي القسمة %
لإضافة 1 الى متغير:
age++;
لطرح 1 الى متغير:
age--;
لاضافة عدد الى قيمة المتغير:
var age = 16;
age += 5;
بمعنى اضافة العدد 5 الى 16 و وضعها داخل age.
لطرح عدد الى قيمة المتغير:
age -= 5;
لضرب عدد في قيمة المتغير:
age *= 5;
لقسمة عدد في قيمة المتغير:
age /= 5;
في حال اردت اضافة مزدوجتين " داخل نص string فذلك سيحدث مشكلة لذلك وجب اضافة شرطة مائلة \ قبلها:
console.log("hello \"chihab\" .");
يمكن استعمال الشرطة المائلة في امور اخرى:
t\ : لاضافة مسافة كبيرة.
\n : للانتقال لسطر جديد.
\\ : لاضافة شرطة مائلة.
عامل التشغيل او + تضيفها بين نصين string لتركيبهما معا.
هناك ايضا += لاضافة سلسلة لآخر سلسلة اولى.
هذه العوامل تسمح باضافة متغير الى نص او متغير.
لمعرفة طول سلسلة نضيف .length بعد النص مباشرة:
console.log("chihab".length);
تدوين الاقواس هو طريقة لاستخراج الاحرف من نص string:
var I = "chihab"[0];
قيمة المتغير I هو c اي القيمة الولى لان js تبدأ العد من 0.
المصفوفة هي نوع من المتغيرات تخزن داخلها مجموعة من القيم من مختلف البيانات:
var a = ["chihab",5,null];
يمكننا تخزين مصفوفات داخل مصفوفة:
var ai = [["hi,4],["ghol",6]];
يمكننا الوصول الى عناصر المصفوفة الذي يستخدم في النصوص string لطبعه او تخزينه في متغير او تغييره:
var c = [4,5,6];
c[1] = 7;
هذا الكود غير الرقم 5 الى7.
و يمكننا الوصول لمصفوفة داخل مصفوفة:
var c = [4,[3,5]];
c[1][0];
لاضافة قيم الى مصفوفة نستعمل دالة push:
var c = [4,5,6];
c.push(7);
هذا الكود يجعل المصفوفة c = [4,5,6,7]
لحذف قيم من آخر مصفوفة نستعمل دالة pop :
c.pop();
هذا الكود يحذف الرقم 7 من آخر المصفوفة.
و لحذف من أول المصفوفة نستعمل دالة shift:
c.shift();
هذا الكود يحذف الرقم 4 من أول المصفوفة.
لاضافة قيم الى أول المصفوفة نستعمل دالة unshift:
var c [4,5,6];
c.unshift(3);
هذا الكود يضيف الرقم 3 الى اول المصفوفة.
var c = [4,5,6,1,2,3,4];
c.splice(0,3);
هذا الكود سيحذف القيم 3 الاولى حيث الوسيطة الاولى هي لفهرسة القيمة الولى حيث يبدأ الحذف و الوسيطة الثانية هي عدد العناصر التي سيحذفها.و إذا اردنا وضع قيم مكان القيم المحذوفة يجب تمرير وسيطة ثالثة للدالة تحوي القيم الجديدة.
var c = [1,2,3,4,5,6,7];
var v = c.slice(2,5);
هذا الكود سينشأ مصفوفة جديدة ينسخ فيها جزء من المصفوفة القديمة دون المساس بالقديمة.حيث الوسيطة الاولى هو الفهرس الذي يبدأ منه النسخ و الوسيطة الثانية هو الفهرس الذي بعد الفهرس الذي يتوقف فيه النسخ.
var c = [1234];
var v = [...c];
هذا الكود يستعمل عامل الانتشار مما ينسخ كل المصفوفة القديمة في الجديدة.
و لدمج مصفوفتين مع بعض بعامل الانتشار:
var c = [3,4];
var v = [1,2,...c,5,6];
هذا الكود سيضيف المصفوفة الاولى داخل الثانية.
للتحقق من وجود عنصر في مصفوفة نستعمل indexOf() الذي يرجع فهرس العنصر إذا وجد و إذا لم يجده يرجع -1.
الدوال هي مجموعة من الاكواد تنفذ حين استدعائها تعرف بالكامة المفتاحية function ثم اسم الدالة متبوعا باقواس ثم قوسين متعرجين داخلهما الاكواد:
function name(){
console.log("hello world);
}
و لاستدعائها نكتب اسم الدالة:
name();
المعلمات او الوسيطات هي عناصر نائبة تكتب داخل الاقواس في تعريف الدوال و تعطى قيمتها عند استدعائها:
function yname(name){
console.log("hello "+name);
}
yname("chihab");
هذا الكود يعرف وسيطة هي name و يستعملها في الدالة و يعطيها قيمتها اثناء استدعاء دالتها.
return هي طريقة لتعطي الدالة قيمة:
function returnFun(){
return 5;
}
هذه الدالة ستعيد قيمة 5 و في هذه الحالة يمكننا تخزين قيمة الدالة داخل متغير من خلال كتابة عبارة الإستدعاء بعد التعريف بمتغير، و إذا لم يكن هناك return فتكون قيمة الدالة undefined.
boolean هي قيم منطقية تكون إما true او false فقط و لا توضع بين مزدوجتين.
typeof طريقة لمعرفة نوع البيانات:
typeof "hello";
ستعود string:
العبارات الشرطية if تخبر js ان تنفذ الأكواد داخل الأقواس المتعرجة إذا تحقق الشرط داخل الأقواس العادية بمعنى إذا كانت true ينفذ،و اذا كانت false لا ينفذ:
if(5>4){
console.log("greater than");
}
في حال لم يكن الشرط صحيح يمكننا استعمال دالة else if لتنفيذ كود في حالة شرط جديد:
else if(5==4){
console.log("equal");
}
و في حال لم تنجح أي منها نستعمل دالة else :
else {
console.log("less than");
}
من عوامل المقارنة في العبارات الشرطية:
== عامل المساواة يقارن بين بيانين دون اعتبار نوع البيانات.
=== عامل المساواة الصارم يقارن مع اعتبار نوع البيانات.
!= عامل عدم المساواة دون اعتبار النوع.
!== عامل عدم المساواة الصارم مع اعتبار النوع.
> عامل اكبر من.
>= عامل اكبر من او يساوي
< عامل اصغر من
<= عامل اصغر من او يساوي.
لاختبار شيئين في نفس الوقت نستعمل عامل &&:
if(5>4 && 5>6)
او عامل || لاختيار واحد من الشرطين.
و هناك طريقة اخرى للعبارات الشرطية غير if هي switch حيث تكتب ()switch و داخل الاقواس المتغير الذي تريد مقارنته و في كل حالة تكتب case و امامها المقارن به و تحتها الكود الذي تريد تنفيذه و تحتها break:
switch(fruit){
case "orange":
console.log("orange");
break;
case "apple":
console.log("apple");
break;
في حالة لا توجد حالات موافقة نستعمل default في مكان case.
الكائنات هي طريقة ذكية لتخزين البيانات تشبه المصفوفات لكن للوصول الى عناصرها نستعمل الخصائص و ليس الفهرسة. لتعريف كائن:
const dog = {
name : "spike";
age : 2;
"date of birth" : 2016;
}
هذا الكود انشأ كائن إسمه dog له 3 خصائص هي: name,age,date of birth. و لكل خاصية قيمة.
هناك طريقتان للوصول إلى عناصر الكائن إما التدوين النقطي، حيث تكتب اسم الكائن ثم اسم الخاصية: 
object.prop1
او تدوين الاقواس الذي تحتاجه في حال كانت هناك مسافة في اسم الخاصية(في هذه الحالة يجب استعمال المزدوجتين) او استعمال متغير:
object["prop 1"]
لتحديث خاصية في كائن:
object.prop = newValue;
لإضافة خاصية جديدة إلى كائن نستعمل نفس طريقة تعديلها:
object.newProp = Value;
لحذف خاصية في كائن:
delete object.prop;
إذا أردنا التحقق من وجود خاصية في كائن نستعمل دالة hasOwnProperty():
object.hasOwnProperty(property);
اذا اردنا استخراج اسماء الخصائص الموجودة في كائن:
const persone = {
a : 1,
b : 2,
c : 3
}
for (let i in persone){
console.log(i);
}
هذا الكود سينشأ متغير i سيضع داخله كل مرة اسم خاصية ثم يطبعها بالترتيب.
الدالة object.keys() تأخذ كائنا كوسيطة و ترجع مصفوفة من السلاسل متكونة من خصائص ذلك الكائن.
الحلقات التكرارية هي اكواد لاعادة تنفيذ كود معين عدة مرات حسب الشرط حتى يصبح الشرط غير صحيح فيتوقف الكود و هي انواع:
 while loop :1
var i = 0;
while(i<5){
console.log(i);
i++;
}
هذا الكود يعرف متغيرا i بقيمة 0. و يبدأ حلقة while بشرط ان يكون i اقل من 5 في كل مرة يكتب قيمة i ثم يضيف 1 الى i و تعاد العملية حتى يصير i =5 و منه يصير الشرط غير صحيح و عليه يتوقف الكود و النتائج هي: 0 1 2 3 4.
 2: for loop
يتم التصريح عن حلقات For بثلاثة تعبيرات اختيارية مفصولة بفواصل منقوطة:
for (a; b; c)، أين aبيان التهيئة ، bهو بيان الشرط ، cوهو التعبير النهائي.
يتم تنفيذ جملة التهيئة مرة واحدة فقط قبل بدء الحلقة. يتم استخدامه عادة لتحديد وإعداد متغير الحلقة الخاصة بك:
for(var i=0; i<5;i++){
console.log(i);
}
نتائجه مثل نتائج while loop السابقة.
 do...while loop :3
يطلق عليها do...while حلقة لأنها ستقوم أولا doبتمرير الكود داخل الحلقة بغض النظر عن أي شيء ، ثم تستمر في تشغيل الحلقة whileالتي يتم تقييم الشرط المحدد لها true:
var i=0;
do{
console.log(i);
i++
}
while(i<5);
يمكن استبدال الحلقات التكرارية بالعودية:
function multiply(n) {
  if (n <= 0) {
    return 0;
  } else {
    return multiply(n - 1) + 1;
  }
};
continue :تعني تجاهل هذه الحلقة و الانتقال للتي بعدها
هذا الكود تزيد قيمة n ب1.
Math.random() : دالة تنشأ رقم عشوائي بين 0و1
Math.floor() : دالة تقرب العدد العشري من أقرب عدد صحيح.
Math.max() : تقبل مجموعة قيم عددية، لتعطيك أكبرها و تقبل معلمة الراحة.
parseInt() : دالة تحول النص string الى عدد.
parseFloat(): تحول الى float.
Object.freeze() : لمنع حدوث تغيير في كائن.
toUpperCase(): لجعل الحروف كبيرة.
يمكننا تعويض if/else: 
بناء الجملة a ? b : c حيث aيكون الشرط ، bهو الرمز الذي سيتم تشغيله عند عودة الشرط true، cوهو الرمز الذي سيتم تشغيله عند إرجاع الشرط false:
i<5) ? "is less" : (i>5) ? "is great" : "is equal" )
يمكن انشاء دوال مجهولة بطريقتين:
const myfun = function() {
return 1;
}
أو:
const myfun = () => {
return 1;
}
و إذا لم يكن هناك الا ارجاع في الدالة تستطيع كتابته:
const myfun = () => 1;
و مثل الدوال العادية نضع الوسيطات داخل الاقواس:
const fun = (item) => item;
يمكن انشاء دوال تتنفذ وحدها:
(function c(){
return "hello";
})();
هذه الدالة ستستدعي نفسها بمجرد تشغيل البرنامج.
يمكننا اضافة وسيطات افتراضية في حال نسي المستخدم اضافة وسيطة:
const c = (age=5) => age;
c();
في هذا الكود اذا نسي المستخدم وضع قيمة للوسيطة يتم وضعها افتراضيا 5.
يمكننا اضافة معلمة الراحة التي تسمح باضافة اي عدد من الوسيطات و تخزينه في مصفوفة:
const c = (...args) => args.length;
خصائص التدمير هي ان تستخرج قيم من الكائن بذكر اسم الخاصية:
const v = {
name : "chihab";
age : 17;
}
const {name,age} = v;
هذا الكود سينشأ متغيرين nameو age يحملان قيم الخصائص التي لها نفس اسمائهما.
و اذا اردنا تغيير اسماء المتغيرات:
const {name:myName, age:myAge} = v;
هذا الكود سينشأ متغيرين myName و myAge لهما قيم الخصائص name و age.
القوالب الحرفية هي طريقة لاضافة المتغيرات او خصائص الكائنات و المصفوفات الى نصوص بديلة لعامل الجمع +:
var v = "chihab";
console.log(`my name is ${v}`);
ملاحظة: يجب استعمال ` بدل المزدوجتين " في النص.
هناك طريقة لإنشاء الكائنات بالهيكلة أو دوال المنشئ و هي بإنشاء class بإسم و داخله constructor مع وسيطة ان وجدت و ان لم توجد لا ننشأ constructor ، و دوال ان وجدت و بعدها ننشأ مثيل للكلاس ب: new يحمل خصائصه و دواله :
class person {
constructor (name) {
this.name = name;
}
defin(){
return `my name is ${this.name}`;
}
}
const def = new person("chihab");
def.defin();
هذا الكود سينشأ class اسمه person لديه هيكل الذي يمنحه خاصية name.و لديه دالة defin التي تأخذ الخاصية name و تضيفها الى نص. ثم ننشأ مثيل للكلاس لديه نفس خصائصه. ثم قمنا باستدعاء الدالة من خلال النسخة الجديدة.
يمكننا استيراد او تصدير اكواد من ملف js الى ملف آخر و يجب قبل ذلك كتابة هذا الكود في صفحة html:
<script type="module" src="url.js></script>
و بهذا يستطيع الملف الاستمتاع بخصائص الاستيراد و التصدير،لتصدير دوال او متغيرات... :
export var c = "hello";
أو:
export{c};
و لاستيرادها:
import c from "url.js";
و لاستيراد كل شيء من ملف:
;"import * as newF from "url.js
حيث newF هو اسم مستعار يجتمع فيه كل الأكواد المستوردة و لاستخدام متغير او دالة... منه:
;(console.log(newF.c
الوعود هي كما يظهر اسمها توعد بفعل شيء إذا تحقق الوعد و تفعل شيء آخر عند فشل الوعد، و نحتاج في ذلك الى دالة Promise التي هي دالة منشئ لذلك نحتاج لإنشاء نسخة و نضع داخلها دالتين واحدة في حال النجاح و الاخرى في حال الفشل:
const prom = new Promise((resolve,reject) =>{
if(condition){
resolve(في حال نجاح الشرط)
}
else {
reject(في حال فشل الشرط);
}
});
بعد انتهاء الوعد نحتاج لفعل شيء ما:
prom.then((result) => {
  ;(console.log(result
})
يتحقق هذا الكود في حال النجاح حيث ننشأ دالة بوسيطة تمرر قيمة الوعد في خال النجاح:
prom.catch(error) => {
  console.log(error);
})
يتحقق هذا الكود في حال الفشل مثل سابقه.
يتنفذ هذا الكود مباشرة.
تستخدم التعبيرات العادية لمطابقة النصوص و معرفة اذا ما كان النص الذي نبحث عنه موجودا، من بين الطرق لدينا دالة test() و العبار التي نبحث عنها تكون بين //:
test("chihab");.//hi
حيث /hi/ هي العبارة التي نبحث عنها و "chihab" هي العبارة التي نبحث فيها. سترجع الدالة true لأنه وجد العبارة و اذا لم يجد سيرجع false.هذه التعبيرات حساسة لحالة الأحرف ف/hi/ ليست /Hi/ و ليست /HI/.
دالة match() حين تجد تطابق ترجع قيمته عكس test التي ترجع true او false. و صيغته عكس test:
.match(/hi/);"chihab"
سترجع هذه الدالة "hi".
يمكننا البحث عن عدد من الأنماط في تعبير واحد باستعمال | :
/dog|cat/.test("i have a cat");
هذا الكود سيرجع true لانه وجد واحد من الانماط.
لتجاهل حالة الحروف نستعمل علم i:
hi/i/
هذا الكود سيطابق كل من hi و Hi و HI.
للبحث عن نمط اكثر من مرة نستعمل العلم g:
hi chihab'.match(/hi/g)"
"hi chihab".match(/hi/)
ترجع هذه الدالة ["hi","hi"].
في حال نسيت احد الحروف نستعمل عنصر الإبدال . :
/.hu/
سيتطابق مع جميع الكلمات مثل hua، hub,...huz
اذا كنت تريد التحقق من مجموعة من الكلمات التي تختلف في حرف واحد نستعمل عامل المشترك [a,b,...z] :
/[f,hu[n,b/
هذا الكود سيطابق كل من hun,hub و huf.
إذا اردنا مطابقة مجال من حروف ابجدية:
/[hu[a-r/ 
بمعنى سيطابق كل من hua,hub,...hur.
و كذلك يمكن للأرقام.
كما يمكننا انشاء مجال لا نريد مطابقته نضيف ^ داخل المجال:
/[^auiey]/
بمعنى لن يطابق الحروف المتحركة.
معامل تكرار مرة او اكثر + يرجع كم مرة تكرر العنصر:
(mississipi".match(/s+/ig";
سيعيد ["ss","ss"]
معامل تكرار صفر مرة او اكثر *:
/*Aa/
اذا وجد A وحدها سيعيد true و اذا وجد Aa او اكثر سيعيد true ايضا.
عامل المطابقة الكسول ؟ عكس معامل التكرار اكثر من مرة حيث يعيد اقصر سلسلة ممكنة.
^ عند استعماله خارج مجال يشير ان النمط يجب ان يكون في اول المطابقة.
$ مثل سابقه غير انه يكون في آخر المطابقة:

/$story/
/w\/ هو اختصار يختصر مجال فيه كل الأرقام و الحروف الكبيرة و الصغيرة و الشرطة السفلية.
/W\/ عكس السابق حيث يطابق كل شيء ما عدا المجال السابق.
/d\/ مجال في كل الأرقام.
/D\/ عكس السابق يطابق كل شيء ما عدا الأرقام.
/s\/ تطابق المساحات البيضاء.
/S\/ عكس السابق.
لوضع حد ادنى و أعلى لعدد الانماط:
/{3,5}a/ 
سيطابق ما بين 3 a كحد ادنى حتى 5 a كحد اعلى.
لوضع حد ادنى فقط:
/{,a{3/
لوضع قيمة محددة:
/{a{3/
لتطابق نمط فيه مجموعتي حروف مختلفة :
/(john (wick|mark/
سيطابق كل من النمطين john wick و john mark.
يمكن حفظ نمط كانه متغير من خلال تحويطه بقوسين ثم وضعه 1\:
/1\ 1\ (w+)/
دالة inludes() ترجع  true إذا كان الجملة المقدمة لها موجودة في الالعبارة التي تحاول مطابقتها وfalse إذا كانت العكس. 
يمكننا تغيير النص المطابق:
.replace("green","blue");"sky is green"
هذا الكود سيغير green الى blue
الطريقة هي ان يكون للكائن خاصية قيمتها تكون دالة:
const dog={
name: "nike",
sayName: () => "this dog has name"+dog.name+"."
}
العامل this يشير الى الكائن المتواجد داخله:
const c = {
name: "chihab",
age: 16,
myAge: "my age is:"+ this.age +"."
}
this يشير لاسم الكائن و أخذ كل خصائصه.
دوال المنشئ هي دوال تنشئ كائنات اسمها يكون او حرف كبير لتعيين خصائص نستعمل العامل this:
function Bird() {
this.name = "twity",
this.age = 2,
}
let bird = new Bird();
انشأنا دالة منشئ تنشأ خصائص لكائن ثم ننشأ كائن جديد يحمل تلك الخصائص.
و هناك طريقة اخرى لإنشاء مثيل:
let bird = Object.prototype(Bird.prototype);
للتحقق مما إذا كان الكائن منشئ بواسطة دالة منشئ نستعمل دالة instanceof:
bird instanceof Bird;
سيعيد true.
الخصائص التي ننشأها بthis هي خصائص خاصة و لإنشاء خصائص النموذج الاولي نستعمل العامل prototype:
Bird.prototype.numLegs = 2;
هذا المود سينشأ خاصية نموذج اولي ستكون في كل المثيلات.لكن يمكن تغيير الخاصية للمثيل.
لانشاء عدة خصائص prototype مرة واحدة:
bird.prototype = {
numLegs: 2,
sayName: () => "my name: "+this.name
}
الخاصية constructor هي خاصية prototype موجودة في كل الكائنات التي أنشأت بواسطة دالة منشأ، تحدد الدالة التي أنشأته.
للتأكد من أبن حصل الكائن على النموذج الاولي الخاص به:
Bird.prototype.isPrototypeOf(canary);
Object هو المنشئ لكل الكائنات و منه Object.prototupe هو النموذج الاولي لكل الكائنات في js.
يمكن ان ننشأ دالة منشئ و في نفس الوقت تكون مثيل لدالة منشئ كبرى و منه تكون مثيلة الدالة الأولى لها نفس النموذج الأولي لدالة المنشئ الكبرى.
دالة map هي دالة شبيهة بالحلقات التكرارية و لكنها خاصة بالمصفوفات حيث تأخذ مصفوفة و تنسخها في مصفوفة جديدة دون المساس بالمصفوفة الاصلية، و لها وسيطة واحدة تكون على شكل دالة تسمى دالة رد الإتصال تقبل 3 وسيطات الاولى هي المتغير او القيمة التي تتعالج ، و الثانية الفهرس الخاص بها و الثالثة المصفوفة التي نعالجها:
let c = [1,2,3,4,5];
let v = c.map(item => item);
console.log(v);
هذا الكود سينشأ مصفوفة جديدة منسوخة من المصفوفة القديمة دون المساس بهذه الاخيرة.
دالة map كتبت بهذه الطريقة:
Array.prototype.myMap = function(callback) {
  const newArray = [];
  for (let i = 0; i < this.length; i++) {
    newArray.push(callback(this[i],i,this));
  }
  return newArray;
};
دالة filter() تشبه map غير انها ترجع العناصر للتي ترجع true  مع الشرط:
let c = [1,2,3,4,5];
let v = c.filter(item => item < 3);
console.log(v);
هذا الكود سينشأ مصفوفة جديدة سينسخ فيها كل عناصر المصفوفة الاولى التي تكون اقل من 3 يعني 1,2.
دالة filter كتبت بهذه الطريقة:
Array.prototype.myFilter = function(callback) {
  const newArray = [];
  if(callback(this[i],i,this)){

  for (let i = 0; i < this.length; i++) {
    newArray.push(this[i]);
  }}
  return newArray;
};
دالة concatت تعمل مع المصفوفات و النصوص، مهمتها إضافة نص الى نص و ارجاع نص جديد او مصفوفة الى مصفوفة و ارجاع مصفوفة جديدة دون المساس بالقديم:
console.log([1,2,3].concat([4,5,6]);
سيرجع مصفوفة جديدة دون المساس بالقديمة.
دالة reduce() دالة شبيهة بالmap و الfilter في غير انها افضل بكثير و هي افضل طريقة للتعديل على المصفوفات و تقبل وسيطتين الاولى دالة ارجاع الاتصال التي تملك اربع وسيطات الاولى المتغير الذي يحفظ قيمة في كل تكرار و ال3 الباقية الموجودة في الدوال السابقة اما الوسيطة الثانية فهي القيمة الاولية للوسيطة الولى لدالة ارجاع الاتصال:
let c = [1,2,3,4];
let v = c.reduce((sum,item) => sum + item)/c.length;
دالة sort() تقبل وسيطة واحدة هي دالة ارجاع الاتصال تقوم بمقارنة قيم المصفوفة التي تمنح لها و ترتيبها في مصفوفة جديدة ، لترتيب ارقام:
let c = [4,6,2,9,1];
let v = c.sort((a,b) => a - b);
هذا الكود سينشأ مصفوفة جديدة و يرتب فيها الارقام من الاصغر للاكبر و اذا اردنا العكس نبدل اماكن b - a.
لترتيب حروف و كلمات بالابجدية:
let c = ["h","j","b","k","a"];
let v = c.sort((a,b) => a === b ? 0 : a > b ? 1 : -1);
هنا استعملنا عبارة شرطية لترتيب الحروف ابجديا و اذا اردنا الترتيب العكسي نغير اماكن 1,1-.
دالة split() تقوم بتقسيم نص الى سلسلة من النصوص تقبل وسيطة واحدة تكون هي التي تقسم النص:
let c = "hello my friends how are you");
let v = c.split(" ");
سيرجع مصفوفة جديدة تحتوي على كل كلمات النص الاول و لتقسيمها لكل حرف ("") و يمكننا استعمال عبارات المطابقة.
الدالة join() هي عكس split() حيث تجمع عناصر مصفوفة الى نص و تقبل وسيطة هي التي تكون بين العناصر:
let c = ["c","h","i","h","a","b"];
let v = c.join("");
ستنشأ نص يحمل قيمة chihab
دالة every() تتأكد اذا كانت كل عناصر المصفوفة تحقق الشرط و تعيد true او false و تقبل وسيطة واحدة هي دالة ارجاع الاتصال :
let c = [1,2,3,4];
let v = c.every(item => item< 5);
سترجع true.
دالة some() مثل السابقة لكن يكفي ان يحقق واحد فقط الشرط لترجع true.
Array.isArray() هي دالة تتحقق اذا كان الوسيطة التي تم تمريرها مصفوفة او لا فترجع true او false.
 String.fromCharCode()دالة تحول الارقام الى نص.
toString() دالة تحول العدد الى string.
دالة toFixed() تقرب فيمة عدد عشري الى رقب تقريبي و تاخذ وسيطة عي غدد الارقام بغد الفاصلة:
let num = 3,14132;
len newNum = num.toFixed(2);
سينشا متغير يحمل قيمة 3,14 اي العدد الاول مع تقريبه الى رقمين بعد الفاصلة و سيعيد نصا.
هدف js الاساسي هو استعماله مع صفحات الويب و لفعل ذلك يمكن ان نستعمل js داخل صفحات html من خلال:
<script></script>
و نكتب الكواد داخل الوسم.
او انشاء رابط لملف خارجي:
<script src="main.js"></script>
حيث يربط صفحة html بصفحة main.js
دالة alert() تعرض نافذة منبثقة في صفحة الويب و داخلها نص الذي ادخلناه للدالة.
دالة prompt() نافذة منبثقة تعرض نصا قدمناه للدالة و تطلب مدخلا من المستخدم.
دالة document.write() يمسح كل شيء من الملف المربوط و يكتب فوقه.
دالة Date() هي دالة منشئ من الدوال الجاهزة في js حيث تعرض الوقت و التاريخ.
DOM هي طريقة للوصول لعناصر html و تعديلها من خلال js فقط:
document هو كائن يمنحك الوصول للملف كامل و منه لبقية العناصر.
document.title يمنح الوصول لعنوان الصفحة و تعديلها.
document.body يمنح الوصول لجسم صفحة html.
لانشاء عنصر جديد علينا الوصول للاب الذي نريد اضافة العنصر الجديد له ثم انشاء العنصر الجديد داخل الاب:
let body = document.body;
let p = document.createElement("p");
body.appendChild(p);
هنا انشانا متغير body يمنحنا الوصول للاب body ثم ننشا متغير p الذي ينشأ وسم p و من أجل ان نضيفه الى الصفحة نستعمل دالة appendChild() الذي يضع العنصر الجديد داخل الاب المختار.
هناك طريقة اخرى لاضافة العناصر:
body.innerHTML = "<p> hello</p>
لحذف عنصر:
body.removeChild(body.childNodes[1])
هنا سنبحث عن الابن الثاني من الاب body الذي نختاره بقائمة childNodes  او باي طريقة اخرى ثم نحذفه بدالة removeChild().
لاستبدال عنصر قديم بعنصر جديد:
body.replaceChild(document.createElement("span"),p)
حيث نستبدل عنصر الفقرة بعنصر span ننشأه جديد.
يمكننا الوصول لعناصر html من خلال id او class او tagName بواسطة دوال مثل getElementById او getElementsByClassName او getElementsByTagName او بالدالة querySelectorAllو او getSelector حيث هاتان الدالتان الاخيرتين يمكن استعلام عن اسم الوسم او الid او الclass...
لإضافة نص الى عنصر:
p.innerText("this is text")
للوصول لخصائص css لعنصر نصل الى خاصية style و بعدها خاصية css ثم قيمتها:
p.style.color = "red"
classList يسمح بالوصول و التعديل على كلاسلت عنصر.
الاحداث او events هي حدوث شيء عندما نقوم بفعل و يكون ذلك بالجافاسكريبت او html اما بالجافاسكريبت:
document.querySelector("button").addEventListener("click",alert("hello"))
هذا الكود انشأ حدث حيث عند الضغط على الزر تظهر نافذة منبثقة برسالة hello.و بالhtml:
<button click=alert("hello")>hello</button>
هنا ايضا كما قبل.
click حدث ينتظر الضغط على عنصر.
dblclick ينتظر ضغطة مزدوجة.
onkeyup دالة تسمح باخراج مباشر للمدخلات
oninput مثل سابقه لكنه يشمل النصوص و الاختيارات و الالوان و الملفات...
BOM هي خاصة بالمتصفح و التحكم بعناصره:
window.innerWidth قيمته هي عرض متصفحك
window.innrrHeight قيمته طول متصفحك
window.open() دالة نمرر لها رابط يقوم بفتحها
screen.width قيمته هي عرض الشاشة الكلي
screen.height قيمته هي طول الشاشة الكلي
Json هي قواعد بيانات js يتم تعريفها داخل ملف بامتداد json من خلال مصفوفة كبيرة بدون تعريف داخلها مجموعة من الكائنات:
[
{
name:"chihab",
age:17
},
{
name:"haithem",
age:15
}
]
هذا هيكل json بسيط.
AJAX هو طريقة للتواصل مع قواعد بيانات json :
دالة XMLHttpRequest() تقوم باستخراج معلومات من قواعد بيانات و هي دالة منشئ و منه يمكن انشاء كائن لنتمكن منأ استعمالها، و لدى هذا الكائن وظيفتين اساسيتين هما open و send:
open() تأخذ معلمتين الاولى إما GET إذا اردنا الحصول على معلومات و POST إذا اردنا ارسال معلومات.و المعلمة الثانية هي رابط قاعدة البيانات.
عند احضار البيانات نستعمل الحدث onload او اي حدث آخر مع الكائن الجديد او مع زر مثلا او اي عنصر اخر حسب الحدث و التي نجعلها تساوي دالة داخل هذه الدالة نحتاج لاحضار البيانات فنستعمل دالة JSON.parse() و داخلها responseText مع الكائن، عندئذ تكون المعلومات خزنت في الدالة و لعرضها نستعمل دالة send() مع الكائن.
هناك دالة جاهزة تكشف حالة الاتصال مع السيرفر:
onreadystatechange()
و هناك مجموعة من العناصر يمكن استعمالها مع كائن الاستدعاء داخل هذه الدالة او خارجها منها:
readyState:و تساوي رقم يمثل حالة الاتصال مع السيرفر و من بين هذه الحالات:
0: معناه ان الطلب لم يحضر او غير صالح.
1: ان الانترنت غير جيدة او الاتصال غير مستقر.
2: الطلب قد الوصول.
3:الطلب وصل و قيد المعالجة.
4: الطلب وصل و تمت معالجته و جاهز.
status: الحالة العامة للطلب و يمثل بارقام اشهرها:
200:بمعنى الطلب سليم و جاهز.
403:بمعنى انك ممنوع من الوصول لهذه الصفحة.
404:بمعنى هذه الصفحة غير موجودة.
دالة fetch() هي دالة تركب بين الوعود و ajaax حيث تقبل وسيطة واحدة هي رابط ملف json او api ثم نضيف لها then مثل الوعود العادية و لتحويل الالبيانات لjson نضيف لها .json
هذه اللغة لغة غير متزامنة اي تبدأ من أعلى الكود لاسفله و تنفذه بالترتيب و من اجل ان نجعل دالة متزامنة :
async (time) => time = await new Date()
حيث اضفنا await قبل القيمة التي ننتظرها و async قبل الدالة التي تنتظر القيمة قبل ان تتنفذ.
من اجل كتابة api بطريقة منظمة :
const api = "https://example.com/api"
function getData(){
const response = fetch(api);
const data = response.json();
console.log(data)
}
getData()
هذا الهيكل الاساسي لاستدعاء api و يمكننا التعديل عليه لاحقا.
localStorage هي قاعدة بيانات مصغرة جدا في المتصفحاكبر حجم ممكن لها هو 5mb يمكننا من حفظ معلومات سطحية خاصة بالمستخدم كلون الموقع و معلومات تسجيل الدخول او اشياء اخرى، لاستدعائه نكتب localStorageة و لديه عدة دوال جاهزة من بينها:
setItem():الذي يضع بيانات داخل المتصفح تقبل قيمتين الاولى اسم المفتاح و الثانية قيمته
getItem():يحضر القيم منه و يقبل قيمة واحدة هي اسم المفتاح.
key(): يقبل قيمة واحدة هي فعرس المفتاح ليعيد اسمه
clear(): يمسح كل البيانات
removeItem(): يمسح عنصرا واحدا و يقبل اسم مفتاحه كوسيطة.





