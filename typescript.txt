هو تحديث أو نسخة مطورة من جافاسكريبت تجعل من جافاسكريبت تشبه لغات البرمجة كالجافا و السي...،حيث تهتم بأنواع البيانات.
و يجب تحويل ملف ts الى js عن طريق اداة tsc بعد تنزيلها بواسطة npm:
npm install -g typescript
بالطريقة التالية:
tsc yourfile.ts
حيث yourfile.ts هو ملف ts الذي نود ترجمته ينتج في النهاية ملف js بإسم yourfile.
هنا نكتب جافاسكريبت عادية لأنها مبنية عليها.
نستعمل هذا الإطار من أجل المحافظة على نوع البيانات، فعند تعريف متغير و تكون قيمته نص عند إعطائه قيمة أخرى لا يمكن أن تكون من نوع آخر:
let c = "hello";
c = 12;
سيعطينا رسالة خطأ لأنا غيرنا نوع البيانات الخاص بالمتغير من نص إلى رقم.
و يسمح أيضا بأن نمنح للمتغير نوع البيانات الخاص به:
let v: string ="goal";
هذا سيخبر أن هذا المتغير قيمته هي نص و لن تتغير.
تحتوي typescript لديها نفس أنواع البيانات الخاصة ب js غير ان لها نوع آخر و هو any الذي يقبل أي نوع. و نوع يسمى union الذي يقبل نوعين من البيانات تختارهم انت(لا نكتب union عند تعريف المتغير).
في المصفوفات عند تعريف مصفوفة يمكن ان نعرف نوع البيانات الموجودة داخلها:
let v: number[] = [1,2,4,7];
هنا عرفنا أن هذه المصفوفة كل عناصرها أرقام.
هناك نوع بيانات يسمى tuple حيث يعرف نوع البيانات داخل المصفوفة:
const g: [number,string,boolean] = [2,"hi",true];
هنا عرفنا tuple الذي يعطي لمصفوفة 3 قيم الاولى رقم و الثانية نص و الثالثة منطقية.
نوع البيانات enum هو شكل من الكائنات, لتعريفه نكتب الكلمة المفتاحية enum:
enum me {
 name = "chihab",
 City = "Constantine",
 religion = "islam"
}
اما الكائنات فنفس كائنات جافاسكريبت بالإضافة إلى تعريف نوع بيانات خصائصه:
let obj: {
  id: number,
  value: string
} = {
  id: 1,
  value: "one"
}
يمكننا استبدال تعريف نوع بيانات بالعلاقة  interface:
interface data {
  id: number,
  value: string
}
let obj: data = {
  id: 15,
  value: "hi"
}
هناك خاصية في interface تسمى readonly نضعها قبل خاصية في interface تجعل الخاصية للقراءة فقط و لا يمكن التعديل عليها:
interface data {
  readonly id: number,
  value: string
}
let obj: data = {
  id: 15,
  value: "hi"
}
أما الدوال فهي نفس دوال جافاسكريبت من غير انه يمكن تحديد نوع بيلنات المدخلات و الإرجاع:
function add(x: number,y:number): number{
  return x+y
}
هنا يجب ان تكون المدخلات x و y ارقام و المرجع رقم.
في الكلاسات هي نفس كلاسات جافاسكريبت مع إضافة نوع البيانات في constructor.




